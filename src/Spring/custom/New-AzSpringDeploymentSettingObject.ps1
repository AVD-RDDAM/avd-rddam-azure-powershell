
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for DeploymentSettings.
.Description
Create an in-memory object for DeploymentSettings.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Spring.Models.DeploymentSettings
.Link
https://learn.microsoft.com/powershell/module/Az.Spring/new-azspringdeploymentsettingobject
#>
function New-AzSpringDeploymentSettingObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.Spring.Models.DeploymentSettings')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="Collection of addons.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Spring.Models.IDeploymentSettingsAddonConfigs]
        $AddonConfig,
        [Parameter(HelpMessage="Indicates whether disable the liveness and readiness probe.")]
        [bool]
        $ContainerProbeSettingDisableProbe,
        [Parameter(HelpMessage="Collection of environment variables.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Spring.Models.IDeploymentSettingsEnvironmentVariables]
        $EnvironmentVariable,
        [Parameter(HelpMessage="The type of the action to take to perform the health check.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Spring.PSArgumentCompleterAttribute("HTTPGetAction", "TCPSocketAction", "ExecAction")]
        [string]
        $LivenessProbeActionType,
        [Parameter(HelpMessage="Indicate whether the probe is disabled.")]
        [bool]
        $LivenessProbeDisableProbe,
        [Parameter(HelpMessage="Minimum consecutive failures for the probe to be considered failed after having succeeded. Minimum value is 1.")]
        [int]
        $LivenessProbeFailureThreshold,
        [Parameter(HelpMessage="Number of seconds after the App Instance has started before probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.")]
        [int]
        $LivenessProbeInitialDelaySecond,
        [Parameter(HelpMessage="How often (in seconds) to perform the probe. Minimum value is 1.")]
        [int]
        $LivenessProbePeriodSecond,
        [Parameter(HelpMessage="Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 for liveness and startup. Minimum value is 1.")]
        [int]
        $LivenessProbeSuccessThreshold,
        [Parameter(HelpMessage="Number of seconds after which the probe times out. Minimum value is 1.")]
        [int]
        $LivenessProbeTimeoutSecond,
        [Parameter(HelpMessage="The type of the action to take to perform the health check.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Spring.PSArgumentCompleterAttribute("HTTPGetAction", "TCPSocketAction", "ExecAction")]
        [string]
        $ReadinessProbeActionType,
        [Parameter(HelpMessage="Indicate whether the probe is disabled.")]
        [bool]
        $ReadinessProbeDisableProbe,
        [Parameter(HelpMessage="Minimum consecutive failures for the probe to be considered failed after having succeeded. Minimum value is 1.")]
        [int]
        $ReadinessProbeFailureThreshold,
        [Parameter(HelpMessage="Number of seconds after the App Instance has started before probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.")]
        [int]
        $ReadinessProbeInitialDelaySecond,
        [Parameter(HelpMessage="How often (in seconds) to perform the probe. Minimum value is 1.")]
        [int]
        $ReadinessProbePeriodSecond,
        [Parameter(HelpMessage="Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 for liveness and startup. Minimum value is 1.")]
        [int]
        $ReadinessProbeSuccessThreshold,
        [Parameter(HelpMessage="Number of seconds after which the probe times out. Minimum value is 1.")]
        [int]
        $ReadinessProbeTimeoutSecond,
        [Parameter(HelpMessage="Required CPU. 1 core can be represented by 1 or 1000m. This should be 500m or 1 for Basic tier, and {500m, 1, 2, 3, 4} for Standard tier.")]
        [string]
        $ResourceRequestCpu,
        [Parameter(HelpMessage="Required memory. 1 GB can be represented by 1Gi or 1024Mi. This should be {512Mi, 1Gi, 2Gi} for Basic tier, and {512Mi, 1Gi, 2Gi, ..., 8Gi} for Standard tier.")]
        [string]
        $ResourceRequestMemory,
        [Parameter(HelpMessage="The type of the action to take to perform the health check.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Spring.PSArgumentCompleterAttribute("HTTPGetAction", "TCPSocketAction", "ExecAction")]
        [string]
        $StartupProbeActionType,
        [Parameter(HelpMessage="Indicate whether the probe is disabled.")]
        [bool]
        $StartupProbeDisableProbe,
        [Parameter(HelpMessage="Minimum consecutive failures for the probe to be considered failed after having succeeded. Minimum value is 1.")]
        [int]
        $StartupProbeFailureThreshold,
        [Parameter(HelpMessage="Number of seconds after the App Instance has started before probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.")]
        [int]
        $StartupProbeInitialDelaySecond,
        [Parameter(HelpMessage="How often (in seconds) to perform the probe. Minimum value is 1.")]
        [int]
        $StartupProbePeriodSecond,
        [Parameter(HelpMessage="Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 for liveness and startup. Minimum value is 1.")]
        [int]
        $StartupProbeSuccessThreshold,
        [Parameter(HelpMessage="Number of seconds after which the probe times out. Minimum value is 1.")]
        [int]
        $StartupProbeTimeoutSecond,
        [Parameter(HelpMessage="Optional duration in seconds the App Instance needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the App Instance are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 90 seconds.")]
        [int]
        $TerminationGracePeriodSecond
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.Spring.Models.DeploymentSettings]::New()

        if ($PSBoundParameters.ContainsKey('AddonConfig')) {
            $Object.AddonConfig = $AddonConfig
        }
        if ($PSBoundParameters.ContainsKey('ContainerProbeSettingDisableProbe')) {
            $Object.ContainerProbeSettingDisableProbe = $ContainerProbeSettingDisableProbe
        }
        if ($PSBoundParameters.ContainsKey('EnvironmentVariable')) {
            $Object.EnvironmentVariable = $EnvironmentVariable
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbeActionType')) {
            $Object.LivenessProbeActionType = $LivenessProbeActionType
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbeDisableProbe')) {
            $Object.LivenessProbeDisableProbe = $LivenessProbeDisableProbe
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbeFailureThreshold')) {
            $Object.LivenessProbeFailureThreshold = $LivenessProbeFailureThreshold
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbeInitialDelaySecond')) {
            $Object.LivenessProbeInitialDelaySecond = $LivenessProbeInitialDelaySecond
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbePeriodSecond')) {
            $Object.LivenessProbePeriodSecond = $LivenessProbePeriodSecond
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbeSuccessThreshold')) {
            $Object.LivenessProbeSuccessThreshold = $LivenessProbeSuccessThreshold
        }
        if ($PSBoundParameters.ContainsKey('LivenessProbeTimeoutSecond')) {
            $Object.LivenessProbeTimeoutSecond = $LivenessProbeTimeoutSecond
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbeActionType')) {
            $Object.ReadinessProbeActionType = $ReadinessProbeActionType
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbeDisableProbe')) {
            $Object.ReadinessProbeDisableProbe = $ReadinessProbeDisableProbe
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbeFailureThreshold')) {
            $Object.ReadinessProbeFailureThreshold = $ReadinessProbeFailureThreshold
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbeInitialDelaySecond')) {
            $Object.ReadinessProbeInitialDelaySecond = $ReadinessProbeInitialDelaySecond
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbePeriodSecond')) {
            $Object.ReadinessProbePeriodSecond = $ReadinessProbePeriodSecond
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbeSuccessThreshold')) {
            $Object.ReadinessProbeSuccessThreshold = $ReadinessProbeSuccessThreshold
        }
        if ($PSBoundParameters.ContainsKey('ReadinessProbeTimeoutSecond')) {
            $Object.ReadinessProbeTimeoutSecond = $ReadinessProbeTimeoutSecond
        }
        if ($PSBoundParameters.ContainsKey('ResourceRequestCpu')) {
            $Object.ResourceRequestCpu = $ResourceRequestCpu
        }
        if ($PSBoundParameters.ContainsKey('ResourceRequestMemory')) {
            $Object.ResourceRequestMemory = $ResourceRequestMemory
        }
        if ($PSBoundParameters.ContainsKey('StartupProbeActionType')) {
            $Object.StartupProbeActionType = $StartupProbeActionType
        }
        if ($PSBoundParameters.ContainsKey('StartupProbeDisableProbe')) {
            $Object.StartupProbeDisableProbe = $StartupProbeDisableProbe
        }
        if ($PSBoundParameters.ContainsKey('StartupProbeFailureThreshold')) {
            $Object.StartupProbeFailureThreshold = $StartupProbeFailureThreshold
        }
        if ($PSBoundParameters.ContainsKey('StartupProbeInitialDelaySecond')) {
            $Object.StartupProbeInitialDelaySecond = $StartupProbeInitialDelaySecond
        }
        if ($PSBoundParameters.ContainsKey('StartupProbePeriodSecond')) {
            $Object.StartupProbePeriodSecond = $StartupProbePeriodSecond
        }
        if ($PSBoundParameters.ContainsKey('StartupProbeSuccessThreshold')) {
            $Object.StartupProbeSuccessThreshold = $StartupProbeSuccessThreshold
        }
        if ($PSBoundParameters.ContainsKey('StartupProbeTimeoutSecond')) {
            $Object.StartupProbeTimeoutSecond = $StartupProbeTimeoutSecond
        }
        if ($PSBoundParameters.ContainsKey('TerminationGracePeriodSecond')) {
            $Object.TerminationGracePeriodSecond = $TerminationGracePeriodSecond
        }
        return $Object
    }
}

